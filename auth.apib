FORMAT: 1A
HOST: http://api.mgduke.com/v1/

# Allegro Authentication

API for device and user authentication and load balancing.

There are two security roles, `producer` has read/write access
and `consumer` which is essentially has a read only access.

Authentication parties - `user`, `device`, `server`.

Access to API is granted by JWT `access_token`, which is generated as result of authentication process.
Device authentication process explaned bellow.

Terms:

* `device ID` - unique device ID hash (MD5/SHA5)
* `device private key` - hash on device at /opt/etc/device.secret.key
* `server private key` - server password hash
* `random payload` = SHA5( random() + salt ) hash generated on server
* `server payload signature` = SHA-256( `random payload` XOR `server private key`)
* `device payload signature` = SHA-256( `random payload` XOR `device private key`)

Device authorization process (acquiring the access_token).

1.) Client -> GET /auth/{Device_ID}

2.) Server generates random payload `SHA-256( random() + salt )` and `server payload signature`

3.) Server responds with { payload: `random payload`, signature: `server payload signature` }

4.) Client calculates `device payload signature`

5.) Client -> POST /auth/{Device_ID} `packet` = JSON { payload: `random payload`, device-signature: `device payload signature`, server-signature: `server payload signature` }

6.) Server using `packet.payload` calculates `server payload signature` and compares
to `packet.server-signature`, calculates `device payload signature` and compares to `packet.device-signature`

7.) Server responds 200 - OK, server generates `JWT token` based on `jwt-private-key`, with following payload { id:`device ID` }.

8.) Server responds 500 - client should retry, after some delay.

9.) Server responds 400 - auth_failure.

10.) `JWT token` authorization is verified by nginx.

HTTP status codes meaning

* 200 (OK) - request is good!
* 302 (Found) - Redirects
* 400 (Bad request) - occurs when you have a malformed request, fix it and try again
* 404 (Not found) - occurs when you request a route that does not exist, fix it and try again
* 500 (Internal server error) - Server got itself in trouble; get in touch with us.

Device authentication is implemented using JWT (Bearer Token) approach

- [Apiary, authentication guide](https://help.apiary.io/api_101/authentication/#token)
- [Apiary, Bearer Token implementation](https://help.apiary.io/api_101/authentication/#token)
- [Apiary, obtaining token](http://docs.apiaryauthorizationapi.apiary.io/#introduction/obtaining-credentials)
- [Apiary, JWT example](http://docs.apiaryauthorizationapi.apiary.io/#reference/0/jwt-validation)
- [Nginx Plus natively supported](https://www.nginx.com/blog/authenticating-api-clients-jwt-nginx-plus/)
- [OpenID is part of OAuth 2.0 ecosystem](http://openid.net/connect/)
- [Understanding JWT](https://medium.com/vandium-software/5-easy-steps-to-understanding-json-web-tokens-jwt-1164c0adfcec)
- [Detailed IETF doc](https://tools.ietf.org/html/rfc7519)


# Group Device Auth

## Authenticate [/auth/{device_id}]

Use [Online tool](http://xor.pw/) for XOR calculation.
Use [Another tool](http://www.sha1-online.com) to generate SHA-256 hashes.

Example data:

+ `random payload` = cd372fb85148700fa88095e3492d3f9f5beb43e555e5ff26d95f5a6adc36f8e6
+ `server payload signature` = a81a130b47b4d24ec197fe7250f3e54eec1d6215e51e2452abd4f03f1e86ec86
+ `device payload signature` = 57e03f4473ba34d7c84706d5b4c133014ff50c9958e058b1f926c10a1b8b4bef
+ `server private key` = 7c5f2894fcd5017643444fbfd008015b4c6a851ac83f68dde85b81b9c4291e11
+ `device private key` = 742b2bb5588cdde09d0e9d1b7cd41cc4cbd3488f138efabef2f60413c28e4cc8

+ Parameters
    + device_id (required, number, `1`) ... ID of the Question in form of an integer

### step 1: get server signed payload [GET]
Server generates `random payload` and calculates `server payload signature`.
`server payload signature` ensures, that `random payload` was generated by the server.

+ Response 200 (application/json)

        {
            payload: "cd372fb85148700fa88095e3492d3f9f5beb43e555e5ff26d95f5a6adc36f8e6",
            signature: "a81a130b47b4d24ec197fe7250f3e54eec1d6215e51e2452abd4f03f1e86ec86"
        }
    

### step 2: verify device signed payload [POST]
Client generates `device payload signature` based on `random payload` and `device private key`.
It submits payload + server & device signature back to server.
Server validates both signatures and returns `JWT token`.

+ Request
    + Attributes (auth verification request)
+ Request (application/json)

        {
            payload: "cd372fb85148700fa88095e3492d3f9f5beb43e555e5ff26d95f5a6adc36f8e6",
            server-signature: "a81a130b47b4d24ec197fe7250f3e54eec1d6215e51e2452abd4f03f1e86ec86"
            device-signature: "57e03f4473ba34d7c84706d5b4c133014ff50c9958e058b1f926c10a1b8b4bef"
        }

+ Response 200 (application/json)
    + Attributes (auth valid response)

## OAuth 2 Bearer Token protected resource [/protected]
### Status [GET]
+ Request
    + Headers

            Authentication: Bearer JWT

+ Response 200 (application/json)
    + Attributes (Server response)

# Data Structures
## auth verification request (object)
+ `payload`: `SHA-256 random hash` (string, required)
+ `server-signature`: `SHA-256( "random payload" XOR "server private key")` (string, required)
+ `device-signature`: `SHA-256( "random payload" XOR "device private key")` (string, required)

## auth valid response (object)
+ `access_token`: `eyJhbGciOiJIUzI1NiJ9.e30.XmNK3GpH3Ys_7wsYBfq4C3M6goz71I7dTgUkuIa5lyQ` (string, required) - valid JWT


## Server response (object)
+ status: ok (string, required)

